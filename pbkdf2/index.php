<?php/** * Created by JetBrains PhpStorm. * User: qiansen1386 * Date: 13-7-19 * Time: 下午12:49 * To change this template use File | Settings | File Templates. */require_once('HashHelper.php');//$hashHelper = new HashHelper();//echo($hashHelper != null);$raw_hash;//Prepare $raw_hash;//if(isset($_POST['Test']['hash'])){//    $raw_hash=$_POST['Test']['hash'];//}else{//    $raw_hash=regenHash();//}if (isset($_POST)&&count($_POST)>0) {    foreach ($_POST as $key => $value) {        switch ($key) {            case 'Test':                $raw_hash=$_POST['Test']['hash'];                testPass($raw_hash);                break;            case 'Hash':                hashPass();                break;            default:                $raw_hash=regenHash();        }    }}else{    $raw_hash=regenHash();}/** * */function testPass($raw_hash){    $form = $_POST['Test'];    if (isset($form['pwd'])) {        //Correct to test validate feature.        $start = get_microtime();        echo '<p>Your password is ' . ((HashHelper::verifyPassword($form['pwd'], $raw_hash))? 'matched':'incorrect');        echo '<pre>';        $params = explode(":", $raw_hash);        echo 'Hash is '.        base64_encode(HashHelper::pbkdf2(            HashHelper::_algorithm,            $form['pwd'],            $params[0],            HashHelper::_iterations,            HashHelper::_hash_bytes,            true        ));        echo '</pre>';        echo '<br/>Using:' . (get_microtime() - $start);        echo '</p>';    }}/** * */function regenHash(){    //Wrong to test hashing feature    echo '<p>';    $hash = HashHelper::hashPassword('password');    echo 'raw password hashing here: ' . $hash;    echo '</p>';    return $hash;}/** * */function hashPass(){    $form = $_POST['Hash'];    if (isset($form['raw'])) {        $raw_text = $form['raw'];        $start = get_microtime();        echo '<p>Your password is :[' . $raw_text.']<br>';        echo 'Hash code is :[' . HashHelper::hashPassword($raw_text)."]";        echo '<br/>Using:' . (get_microtime() - $start);        echo '</p>';    } else {    }}function get_microtime(){    list($usec, $sec) = explode(' ', microtime());    return ((float)$usec + (float)$sec);}?><pre><?=var_dump($_POST); ?></pre><form action="../pbkdf2/index.php" method="POST">    <input type="hidden" name="Test[hash]" value="<?php echo $raw_hash ?>"    <label>Type in "password":<input name="Test[pwd]" type="text" id="password"></label></form><form action="../pbkdf2/index.php" method="POST">    <label>Raw Text to be hashed:<input name="Hash[raw]" type="text"></label></form><!--<button onclick="window.location.replace('index.php')" title="Thank god, we have return button now!">Return Button</button>--><!--<button onclick="window.location.href='index.php'" title="Thank god, we have return button now!">Return Button</button>-->    <button onclick="location.reload('true')" title="Thank god, we have return button now!">Return Button</button>